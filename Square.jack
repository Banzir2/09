// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Square {

   field int x, y, dx, dy; // screen location of the square's top-left corner
   field int sizex, sizey; // length of this square, in pixels

   /** Constructs a new square with a given location and size. */
   constructor Square new(int Ax, int Ay, int Asizex, int Asizey) {
      let x = Ax;
      let y = Ay;
      let sizex = Asizex;
      let sizey = Asizey;
      do draw();
      return this;
   }

   /** Get the x coordinate of the square. */
    method int getX() {
        return x;
    }

    /** Get the y coordinate of the square. */
    method int getY() {
        return y;
    }

    /** Get the x size of the square. */
    method int getSizeX() {
        return sizex;
    }

    /** Get the y size of the square. */
    method int getSizeY() {
        return sizey;
    }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + sizex, y + sizey);
      return;
   }

   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + sizex, y + sizey);
      return;
   }

   method void printPose() {      
      do Output.printInt(x);
      do Output.printChar(" ");
      do Output.printInt(y);
      do Output.printString("   ");
      return;
   }

   method void move(int ndx, int ndy) {
      var int xbound, ybound;
      var boolean dxzero, dyzero;
      let dx = ndx; let dy = ndy;
      let xbound = 512 - sizex - 1;
      let ybound = 256 - sizey - 1;
      do erase();
      let y = y + dy;
      let x = x + dx;
      if (x < 0) {
         let x = 0;
      }
      if (y < 0) {
         let y = 0;
      }
      if (x > xbound) {
         let x = 512 - sizex - 2;
      }
      if (y > ybound) {
         let y = 256 - sizey - 2;
      }
      do draw();
      return;
   }

   method void moveTo(int nx, int ny) {
      do erase();
      let x = nx;
      let y = ny;
      do draw();
      return;
   }
}
